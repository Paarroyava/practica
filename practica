/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Project/Maven2/JavaApp/src/main/java/${packagePath}/${mainClassName}.java to edit this template
 */

package com.mycompany.practica;

/**
 *
 * @author ?????????
 */

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Practica {
    
    public static void main(String[] args) throws IOException {
        Path path = Path.of("src","main","java","resources","csv-empleados.csv");
        
        List<empleado> listaEmpleados = Files.lines(path)
                .skip(0)
                .map(line -> {
                    return getEmpleado(line);
                }).collect(Collectors.toList());
        for (empleado emp : listaEmpleados) {
            System.out.println(emp);
        }
        System.out.println("\n \n \n");
        System.out.println("Colección de empleados cuyo salario se encuentre en un rango determinado");
        System.out.println("\n");
        listaEmpleados.stream().filter(e -> e.getSalario() >=2500 && e.getSalario() <=5000).forEach(System.out::println);
        System.out.println("\n");
        System.out.println("Colección de empleados que pertenecen a cada departamento.");
        System.out.println("\n");
        Map<String, List<empleado>> empleadosMap = Files.lines(path)
                .skip(0)
                .map(line -> {
                    return getEmpleado(line);
                }).collect(Collectors.groupingBy(empleado::getDepartamento));
        System.out.println(empleadosMap);
        
        System.out.println("\n");
        System.out.println("Cantidad de empleados por departamento");
        System.out.println("\n");
        Map<String, Long> empleadosDep = Files.lines(path)
                .skip(0)
                .map(line -> {
                    return getEmpleado(line);
                }).collect(Collectors.groupingBy(empleado::getDepartamento, Collectors.counting()));
        System.out.println(empleadosDep);
        
        
    }
    
    
    private static empleado getEmpleado(String line){
        String[] fields = line.split(";");
        if(fields.length != 5)
            throw new RuntimeException("linea invalida en CSV - " + line);
        return new empleado(Integer.parseInt(fields[0]),fields[1],fields[2],Integer.parseInt(fields[3]),fields[4]);
    }
    
 
    
}
